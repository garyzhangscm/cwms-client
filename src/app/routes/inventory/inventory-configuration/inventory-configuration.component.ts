import { Component, inject, OnInit, TemplateRef } from '@angular/core'; 
import { UntypedFormGroup,  Validators, UntypedFormBuilder, AbstractControl } from '@angular/forms';
import { I18NService } from '@core';
import { ALAIN_I18N_TOKEN, _HttpClient } from '@delon/theme';
import { NzMessageService } from 'ng-zorro-antd/message';
import { NzModalRef, NzModalService } from 'ng-zorro-antd/modal';

import { UserService } from '../../auth/services/user.service';
import { Unit } from '../../common/models/unit';
import { UnitOfMeasure } from '../../common/models/unit-of-measure';
import { UnitType } from '../../common/models/unit-type';
import { UnitOfMeasureService } from '../../common/services/unit-of-measure.service';
import { UnitService } from '../../common/services/unit.service';
import { newDefaultItemUOMQuantityValidator } from '../../directives/newDefaultItemUOMQuantityValidator'; 
import { CompanyService } from '../../warehouse-layout/services/company.service';
import { WarehouseService } from '../../warehouse-layout/services/warehouse.service';
import { InventoryConfiguration } from '../models/inventory-configuration'; 
import { ItemDefaultPackageUOM } from '../models/item-default-package-UOM'; 
import { InventoryConfigurationService } from '../services/inventory-configuration.service';

@Component({
    selector: 'app-inventory-inventory-configuration',
    templateUrl: './inventory-configuration.component.html',
    standalone: false
})
export class InventoryInventoryConfigurationComponent implements OnInit {

  private readonly i18n = inject<I18NService>(ALAIN_I18N_TOKEN);

  currentInventoryConfiguration!: InventoryConfiguration;
  
  itemUOMForm!: UntypedFormGroup;
  itemUOMModal!: NzModalRef;
  creatingItemUOMInProcess = false;
  
  isSpinning = false;

  lengthUnits: Unit[] = [];
  weightUnits: Unit[] = [];
  defaultLengthUnit?: Unit;
  defaultWeightUnit?: Unit;
  
  newUnitOfMeasureLengthUnit?: Unit;
  newUnitOfMeasureWidthUnit?: Unit;
  newUnitOfMeasureHeightUnit?: Unit;
  newUnitOfMeasureWeightUnit?: Unit;

  
  // All UOM maintained in the system
  availableUnitOfMeasures: UnitOfMeasure[] = [];
  // All UOMs that can be added to current item package type
  // we will skip the uom that already exists in the
  // current item package type
  availableUnitOfMeasuresForAdding: UnitOfMeasure[] = [];
  
  displayOnly = false;
  constructor( 
    private fb: UntypedFormBuilder, 
    private inventoryConfigurationService: InventoryConfigurationService,
    private warehouseService: WarehouseService,
    private companyService: CompanyService,
    private messageService: NzMessageService,
    private unitOfMeasureService: UnitOfMeasureService,
    private modalService: NzModalService,
    private unitService: UnitService,
    private userService: UserService,) { 

      userService.isCurrentPageDisplayOnly("/inventory/configuration").then(
        displayOnlyFlag => this.displayOnly = displayOnlyFlag
      );                             

      this.currentInventoryConfiguration = { 
        companyId: this.companyService.getCurrentCompany()!.id,
        warehouseId: this.warehouseService.getCurrentWarehouse().id,
        lpnValidationRule: "",
    
        newItemAutoGenerateDefaultPackageType: false,
        newItemDefaultPackageTypeName: "",
        newItemDefaultPackageTypeDescription: "",
        
        itemDefaultPackageUOMS: [],
        inventoryAttribute1Enabled: false,
        inventoryAttribute2Enabled: false,
        inventoryAttribute3Enabled: false,
        inventoryAttribute4Enabled: false,
        inventoryAttribute5Enabled: false,
      }

  }

  ngOnInit(): void { 
    this.loadConfiguration();
    
    
    this.loadUnits();

    
    this.unitOfMeasureService
      .loadUnitOfMeasures()
      .subscribe(unitOfMeasureRes => (this.availableUnitOfMeasures = unitOfMeasureRes));
  }

  loadConfiguration() {
    this.isSpinning = true;
    this.inventoryConfigurationService.getInventoryConfigurations().subscribe({
      next: (inventoryConfigurationRes) => {
        if (inventoryConfigurationRes) {

          // if we already have the configuration setup, load it
          // otherwise, use the default one
          this.currentInventoryConfiguration = inventoryConfigurationRes;
        }
        this.isSpinning = false;
      }
      , 
      error: () =>  this.isSpinning = false
    });
  }
  
  loadUnits() {
    this.unitService.loadUnits().subscribe({
      next: (unitsRes) => {
        unitsRes.forEach(
          unit => {
            if (unit.type === UnitType.LENGTH) {
              this.lengthUnits.push(unit);
              if(unit.baseUnitFlag) {
                this.defaultLengthUnit = unit;
                console.log(`defaultLengthUnit: ${this.defaultLengthUnit?.name}`);
              }
            }
            else if (unit.type === UnitType.WEIGHT) {
              this.weightUnits.push(unit);
              if(unit.baseUnitFlag) {
                this.defaultWeightUnit = unit;
                console.log(`defaultWeightUnit: ${this.defaultWeightUnit?.name}`);
              }
            }
          }
        )
      }
    })    
  }


  saveConfiguration() {
    this.isSpinning = true;
    console.log(`start to save inventory configuration \n ${JSON.stringify(this.currentInventoryConfiguration)}`)
    if (this.currentInventoryConfiguration.id) {
      this.inventoryConfigurationService.changeInventoryConfiguration(this.currentInventoryConfiguration)
      .subscribe({

        next: () =>  {
          this.messageService.success(this.i18n.fanyi('message.action.success'))
        
          this.isSpinning = false;

          this.loadConfiguration();
        }
        , 
        error: () =>  this.isSpinning = false
      });
    }
    else {
      this.inventoryConfigurationService.addInventoryConfiguration(this.currentInventoryConfiguration)
      .subscribe({

        next: () =>  {
          this.messageService.success(this.i18n.fanyi('message.action.success'))
        
          this.isSpinning = false;
          this.loadConfiguration();
        }
        , 
        error: () =>  this.isSpinning = false
      });

    }

  }

  createItemUOMForm(): void {
    this.itemUOMForm = this.fb.group({
      unitOfMeasure: [null, Validators.required],
      quantity: [null, [Validators.required, newDefaultItemUOMQuantityValidator(this.currentInventoryConfiguration.itemDefaultPackageUOMS)]],
      weight: [0, Validators.required],
      length: [0, Validators.required],
      width: [0, Validators.required],
      height: [0, Validators.required],
      defaultForInboundReceiving: [false, Validators.required],
      defaultForWorkOrderReceiving: [false, Validators.required],
      trackingLpnUOM: [false, Validators.required],
    });
  }
  
  openAddingItemUnitOfMeasureModal(
    tplItemUOMModalTitle: TemplateRef<{}>,
    tplItemUOMModalContent: TemplateRef<{}>,
    tplItemUOMModalFooter: TemplateRef<{}>,
  ): void {
    
    this.createItemUOMForm();
    this.creatingItemUOMInProcess = false;

    this.newUnitOfMeasureLengthUnit = this.defaultLengthUnit;
    this.newUnitOfMeasureWidthUnit = this.defaultLengthUnit;
    this.newUnitOfMeasureHeightUnit = this.defaultLengthUnit;
    this.newUnitOfMeasureWeightUnit = this.defaultWeightUnit;

    // load the available UOM
    // will only display the UOM when it is not in the item package type yet
    this.availableUnitOfMeasuresForAdding = this.availableUnitOfMeasures.filter(
      unitOfMeasure =>
        !this.currentInventoryConfiguration.itemDefaultPackageUOMS.some(
          existingItemUnitOfMeasure => existingItemUnitOfMeasure.unitOfMeasureId === unitOfMeasure.id,
        ),
    );

    // Load the location
    this.itemUOMModal = this.modalService.create({
      nzTitle: tplItemUOMModalTitle,
      nzContent: tplItemUOMModalContent,
      nzFooter: tplItemUOMModalFooter,
      nzWidth: 1000,
    });
  }

  get itemUOMQuantityControl(): AbstractControl | null {
    return this.itemUOMForm.get('quantity');
  }

  
  removeItemUnitOfMeasure(removedItemUnitOfMeasure: ItemDefaultPackageUOM): void {
    this.currentInventoryConfiguration.itemDefaultPackageUOMS = this.currentInventoryConfiguration.itemDefaultPackageUOMS.filter(
      itemUnitOfMeasure => itemUnitOfMeasure.unitOfMeasureId !== removedItemUnitOfMeasure.unitOfMeasureId,
    );
  }
  
  weightUnitSelected(unit: Unit) { 
    this.newUnitOfMeasureWeightUnit = unit;
  } 
  lengthUnitSelected(unit: Unit) { 
    this.newUnitOfMeasureLengthUnit = unit;
  } 
  widthUnitSelected(unit: Unit) { 
    this.newUnitOfMeasureWidthUnit = unit;
  } 
  heightUnitSelected(unit: Unit) { 
    this.newUnitOfMeasureHeightUnit = unit;
  } 

  closeItemUOMModal(): void {
    this.creatingItemUOMInProcess = false;
    this.itemUOMModal.destroy();
  }
  confirmItemUOM(): void {
    this.creatingItemUOMInProcess = false;

    if (this.itemUOMForm.valid) {
      this.addItemUnitOfMeasure( 
        this.itemUOMForm.value.unitOfMeasure.value,
        this.itemUOMForm.value.quantity.value,
        this.itemUOMForm.value.weight.value, this.newUnitOfMeasureWeightUnit!.name,
        this.itemUOMForm.value.length.value, this.newUnitOfMeasureLengthUnit!.name,
        this.itemUOMForm.value.width.value, this.newUnitOfMeasureWidthUnit!.name,
        this.itemUOMForm.value.height.value, this.newUnitOfMeasureHeightUnit!.name, 
        this.itemUOMForm.value.defaultForInboundReceiving.value,
        this.itemUOMForm.value.defaultForWorkOrderReceiving.value,
        this.itemUOMForm.value.trackingLpnUOM.value,
      );

      this.itemUOMModal.destroy();
    } else {
      this.displayFormError(this.itemUOMForm);
    }
  } 
  displayFormError(fromGroup: UntypedFormGroup): void {
    console.log(`validateForm`);
    // tslint:disable-next-line: forin
    for (const i in fromGroup.controls) {
      fromGroup.controls[i].markAsDirty();
      fromGroup.controls[i].updateValueAndValidity();
    }
  }
  
  addItemUnitOfMeasure( 
    unitOfMeasureName: string,
    quantity: number,
    weight: number,
    weightUnit: string,
    length: number,
    lengthUnit: string,
    width: number,
    widthUnit: string,
    height: number,
    heightUnit: string,
    defaultForInboundReceiving: boolean,
    defaultForWorkOrderReceiving: boolean,
    trackingLpnUOM: boolean,
  ): void {
    // Get the unit of measure first
    this.availableUnitOfMeasures
      .filter(unitOfMeasure => unitOfMeasure.name === unitOfMeasureName)
      .forEach(
        unitOfMeasure => {
          this.currentInventoryConfiguration.itemDefaultPackageUOMS = [
            ...this.currentInventoryConfiguration.itemDefaultPackageUOMS,
            {
              unitOfMeasure,
              unitOfMeasureId: unitOfMeasure === null ? undefined : unitOfMeasure.id,
              quantity,
              weight,weightUnit,
              length: length === null ? 0 : length, lengthUnit,
              width: width === null ? 0 : width, widthUnit,
              height: height === null ? 0 : height, heightUnit,
              defaultForInboundReceiving: defaultForInboundReceiving === null ? false : defaultForInboundReceiving,
              defaultForWorkOrderReceiving: defaultForWorkOrderReceiving === null ? false : defaultForWorkOrderReceiving,
              trackingLpn: trackingLpnUOM === null ? false : trackingLpnUOM,
            },
          ];
          this.currentInventoryConfiguration.itemDefaultPackageUOMS.sort((a, b) => a.quantity! - b.quantity!);
        }
      );
  }

} 

